{"version":3,"sources":["tests/index.js"],"names":[],"mappings":";;;;;;gBAAoB,KAAK;;;;kBAaV,IAAI;;;;AAXnB,mBAAQ,UAAC,GAAG,EAAE,QAAQ,EAAK;AACzB,SAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC9C,UAAQ,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;CACrC,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;SAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;CAAA,EAAE,UAAA,KAAK;SAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;CAAA,CAAC,CAAC;;AAE9F,mBAAQ,UAAC,GAAG,EAAE,QAAQ,EAAK;AACzB,SAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC9C,UAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;CACnC,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;SAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;CAAA,EAAE,UAAC,KAAK;oCAAK,IAAI;AAAJ,QAAI;;;SAAK,OAAO,CAAC,GAAG,MAAA,CAAX,OAAO,GAAK,OAAO,EAAE,KAAK,SAAK,IAAI,EAAC;CAAA,CAAC,CAAC;;AAKlH,IAAM,GAAG,GAAG,mCAAW,CAAC;;AAExB,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAC5B,IAAI,CACF;SAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;CAAA,EAC5B,UAAA,CAAC;SAAK,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC;CAAA,CAAC,CAAC;;AAE3C,mBAAQ,UAAU,CAAC,CAChB,IAAI,CACH,UAAC,IAAM;MAAL,IAAI,GAAL,IAAM,CAAL,IAAI;SAAM,OAAO,CAAC,GAAG,MAAA,CAAX,OAAO,GAAK,QAAQ,4BAAK,IAAI,GAAC;CAAA,EAC1C,UAAA,KAAK;SAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC;CAAA,CAAC,CAAC;;AAEjD,SAAS,UAAU,CAAC,QAAQ,EAAE;AAC5B,YAAU,CAAC;WAAM,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;GAAA,EAAE,GAAG,CAAC,CAAC;CACrD","file":"tests/index.js","sourcesContent":["import promise from '../';\n\npromise((arg, callback) => {\n  console.log('arg', arg, 'callback', callback);\n  callback(undefined, 'arg1', 'arg2');\n}, 'an arg').then(value => console.log('value', value), error => console.log('error', error));\n\npromise((arg, callback) => {\n  console.log('arg', arg, 'callback', callback);\n  callback('error', 'arg1', 'arg2');\n}, 'an arg').then(value => console.log('value', value), (error, ...rest) => console.log('error', error, ...rest));\n\n\nimport fs from 'fs';\n\nconst pfs = promise(fs);\n\npfs.writeFile('test.txt', 'wut')\n   .then(\n      () => console.log('written'),\n      e  => console.log('error', e.stack));\n\npromise(dummyAsync)\n  .then(\n    ({args}) => console.log('return', ...args),\n    error => console.log('error!', error.stack));\n\nfunction dummyAsync(callback) {\n  setTimeout(() => callback(undefined, 1, 2, 3), 500);\n}"],"sourceRoot":"/source/"}